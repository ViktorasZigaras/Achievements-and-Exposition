
package animelist;

import java.awt.*;
import javax.swing.*;
import java.io.*;

public class AnimeWindow extends javax.swing.JFrame {
    
    private operations operations;
    private JFileChooser fc;
    
    /** Creates new form AnimeWindow */
    public AnimeWindow() {
        initComponents();
        ExitButton.setEnabled(false);
        SaveButton.setEnabled(false);
        addButton.setEnabled(false);
        changeButton.setEnabled(false);
        deleteButton.setEnabled(false);
        finishedButton.setEnabled(false);
        randomButton.setEnabled(false);
        watchingButton.setEnabled(false);
        ShowListsButton.setEnabled(false);
        SearchButton.setEnabled(false);
        listComboBox.setEnabled(false);
        typeComboBox.setEnabled(false);
        weightComboBox.setEnabled(false);
        lenghtTextField.setEnabled(false);
        nameTextField.setEnabled(false);
        timesTextField.setEnabled(false);
        IDTextField.setEnabled(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        MainTabbedPane = new javax.swing.JTabbedPane();
        SeenScrollPane = new javax.swing.JScrollPane();
        SeenTable = new javax.swing.JTable();
        WatchingScrollPane = new javax.swing.JScrollPane();
        WatchingTable = new javax.swing.JTable();
        KnownScrollPane = new javax.swing.JScrollPane();
        KnownTable = new javax.swing.JTable();
        ReccomendedScrollPane = new javax.swing.JScrollPane();
        ReccomendedTable = new javax.swing.JTable();
        DataPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        lenghtLabel = new javax.swing.JLabel();
        weightLabel = new javax.swing.JLabel();
        listLabel = new javax.swing.JLabel();
        timesLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        lenghtTextField = new javax.swing.JTextField();
        timesTextField = new javax.swing.JTextField();
        typeComboBox = new javax.swing.JComboBox();
        weightComboBox = new javax.swing.JComboBox();
        listComboBox = new javax.swing.JComboBox();
        IDLabel = new javax.swing.JLabel();
        IDTextField = new javax.swing.JTextField();
        UtilPanel = new javax.swing.JPanel();
        UtilTextField = new javax.swing.JTextField();
        UtilButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        MenuIsFailoButton = new javax.swing.JButton();
        ShowListsButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        imagePanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        WorkPanel = new javax.swing.JPanel();
        randomLabel = new javax.swing.JLabel();
        changeButton = new javax.swing.JButton();
        finishedButton = new javax.swing.JButton();
        watchingButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        randomButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main window");
        setName("Main Window"); // NOI18N

        MainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        SeenTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Lenght", "Weight", "Times"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SeenTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SeenPropertyIvedimas(evt);
            }
        });
        SeenScrollPane.setViewportView(SeenTable);
        SeenTable.getColumnModel().getColumn(0).setPreferredWidth(30);
        SeenTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        SeenTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        SeenTable.getColumnModel().getColumn(3).setPreferredWidth(50);
        SeenTable.getColumnModel().getColumn(4).setPreferredWidth(50);
        SeenTable.getColumnModel().getColumn(5).setPreferredWidth(50);

        MainTabbedPane.addTab("Seen", SeenScrollPane);

        WatchingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Lenght", "Weight", "Times"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        WatchingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WatchingPropertyIvedimas(evt);
            }
        });
        WatchingScrollPane.setViewportView(WatchingTable);
        WatchingTable.getColumnModel().getColumn(0).setPreferredWidth(30);
        WatchingTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        WatchingTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        WatchingTable.getColumnModel().getColumn(3).setPreferredWidth(50);
        WatchingTable.getColumnModel().getColumn(4).setPreferredWidth(50);
        WatchingTable.getColumnModel().getColumn(5).setPreferredWidth(50);

        MainTabbedPane.addTab("Watching", WatchingScrollPane);

        KnownTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Lenght", "Weight", "Times"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        KnownTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                KnownPropertyIvedimas(evt);
            }
        });
        KnownScrollPane.setViewportView(KnownTable);
        KnownTable.getColumnModel().getColumn(0).setPreferredWidth(30);
        KnownTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        KnownTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        KnownTable.getColumnModel().getColumn(3).setPreferredWidth(50);
        KnownTable.getColumnModel().getColumn(4).setPreferredWidth(50);
        KnownTable.getColumnModel().getColumn(5).setPreferredWidth(50);

        MainTabbedPane.addTab("Known", KnownScrollPane);

        ReccomendedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Lenght", "Weight", "Times"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ReccomendedTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReccomendedPropertyIvedimas(evt);
            }
        });
        ReccomendedScrollPane.setViewportView(ReccomendedTable);
        ReccomendedTable.getColumnModel().getColumn(0).setPreferredWidth(30);
        ReccomendedTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        ReccomendedTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        ReccomendedTable.getColumnModel().getColumn(3).setPreferredWidth(50);
        ReccomendedTable.getColumnModel().getColumn(4).setPreferredWidth(50);
        ReccomendedTable.getColumnModel().getColumn(5).setPreferredWidth(50);

        MainTabbedPane.addTab("Reccomended", ReccomendedScrollPane);

        org.jdesktop.layout.GroupLayout MainPanelLayout = new org.jdesktop.layout.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(MainTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                .addContainerGap())
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(MainTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );

        DataPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        nameLabel.setText("name");

        typeLabel.setText("type");

        lenghtLabel.setText("lenght");

        weightLabel.setText("weight");

        listLabel.setText("list");

        timesLabel.setText("times watched");

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Movie", "OVA", "TV" }));
        typeComboBox.setSelectedItem("TV");

        weightComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6" }));

        listComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Known", "Watching", "Seen" }));
        listComboBox.setSelectedItem( "Known" );

        IDLabel.setText("ID");

        org.jdesktop.layout.GroupLayout DataPanelLayout = new org.jdesktop.layout.GroupLayout(DataPanel);
        DataPanel.setLayout(DataPanelLayout);
        DataPanelLayout.setHorizontalGroup(
            DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, DataPanelLayout.createSequentialGroup()
                .add(DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, DataPanelLayout.createSequentialGroup()
                        .add(39, 39, 39)
                        .add(nameLabel))
                    .add(DataPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(nameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)))
                .add(DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(DataPanelLayout.createSequentialGroup()
                        .add(35, 35, 35)
                        .add(typeLabel))
                    .add(DataPanelLayout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(typeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .add(DataPanelLayout.createSequentialGroup()
                .add(38, 38, 38)
                .add(lenghtLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 60, Short.MAX_VALUE)
                .add(weightLabel)
                .add(55, 55, 55))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, DataPanelLayout.createSequentialGroup()
                .add(DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(DataPanelLayout.createSequentialGroup()
                        .add(38, 38, 38)
                        .add(listLabel)
                        .add(57, 57, 57))
                    .add(DataPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(lenghtTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)))
                .add(DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(DataPanelLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(timesLabel)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, DataPanelLayout.createSequentialGroup()
                        .add(weightComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .add(DataPanelLayout.createSequentialGroup()
                .add(35, 35, 35)
                .add(IDLabel)
                .addContainerGap(169, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, DataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, IDTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .add(listComboBox, 0, 88, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(timesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        DataPanelLayout.setVerticalGroup(
            DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(DataPanelLayout.createSequentialGroup()
                .add(DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nameLabel)
                    .add(typeLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(typeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lenghtLabel)
                    .add(weightLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(weightComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lenghtTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(listLabel)
                    .add(timesLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DataPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(timesTextField)
                    .add(listComboBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(IDLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(IDTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        UtilPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        UtilTextField.setText("d:/animeList/config.txt");

        UtilButton.setText("Pradeti darba");
        UtilButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UtilButtonActionPerformed(evt);
            }
        });

        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        MenuIsFailoButton.setText("Is failo");
        MenuIsFailoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIsFailoButtonActionPerformed(evt);
            }
        });

        ShowListsButton.setText("Show Lists");
        ShowListsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowListsButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout UtilPanelLayout = new org.jdesktop.layout.GroupLayout(UtilPanel);
        UtilPanel.setLayout(UtilPanelLayout);
        UtilPanelLayout.setHorizontalGroup(
            UtilPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(UtilPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(UtilPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(UtilTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(UtilButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                    .add(MenuIsFailoButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                    .add(ShowListsButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                    .add(ExitButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, SaveButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                .addContainerGap())
        );
        UtilPanelLayout.setVerticalGroup(
            UtilPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(UtilPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(UtilButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(UtilTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(MenuIsFailoButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ShowListsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(SaveButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ExitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        SearchButton.setText("Paieska");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        imagePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        org.jdesktop.layout.GroupLayout imagePanelLayout = new org.jdesktop.layout.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imageLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imageLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
        );

        WorkPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        randomLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        changeButton.setText("change entry");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        finishedButton.setText("finished");
        finishedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishedButtonActionPerformed(evt);
            }
        });

        watchingButton.setText("watching");
        watchingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchingButtonActionPerformed(evt);
            }
        });

        addButton.setText("add entry");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        randomButton.setText("choose random");
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout WorkPanelLayout = new org.jdesktop.layout.GroupLayout(WorkPanel);
        WorkPanel.setLayout(WorkPanelLayout);
        WorkPanelLayout.setHorizontalGroup(
            WorkPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(WorkPanelLayout.createSequentialGroup()
                .add(WorkPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(WorkPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(WorkPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, changeButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, finishedButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, watchingButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, addButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(randomButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(WorkPanelLayout.createSequentialGroup()
                        .add(40, 40, 40)
                        .add(randomLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(WorkPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(deleteButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        WorkPanelLayout.setVerticalGroup(
            WorkPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(WorkPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(changeButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(finishedButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(watchingButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(addButton)
                .add(18, 18, 18)
                .add(randomButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(randomLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(deleteButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(MainPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(WorkPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(DataPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(SearchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(UtilPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(imagePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(206, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(imagePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(MainPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(UtilPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(WorkPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(DataPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(SearchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
        );

        getAccessibleContext().setAccessibleName("MainWindow");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        boolean sameName = false;
        boolean sameLenght = false;
        boolean sameTimes = false;
        boolean blogasID;
        boolean blogasLenght;
        boolean blogasTimes;
        //tikrinam parametrus/ivesti
        try {
            Integer.parseInt(IDTextField.getText());
            blogasID = false;
        } catch (NumberFormatException e) {
            System.out.println(e.toString());
            blogasID = true;
        }
        if (IDTextField.getText().matches("")){
            blogasID = true;
        }
        if (nameTextField.getText().matches("")){
            sameName = true;
        }
        if (lenghtTextField.getText().matches("")){
            sameLenght = true;
        }
        if (timesTextField.getText().matches("")){
            sameTimes = true;
        }
        try {
            if (sameLenght == false){
                Integer.parseInt(lenghtTextField.getText());
            }
            blogasLenght = false;
        } catch (NumberFormatException e) {
            System.out.println(e.toString());
            blogasLenght = true;
        }
        try {
            if (sameTimes == false){
                Integer.parseInt(timesTextField.getText());
            }
            blogasTimes = false;
        } catch (NumberFormatException e) {
            System.out.println(e.toString());
            blogasTimes = true;
        }
        //ar ID blogas?
        if (blogasID == true){
            JOptionPane.showConfirmDialog((Component)null, "Iveskite ID is naujo: ID negali buti tuscias arba ne skaicius!", "alert", JOptionPane.DEFAULT_OPTION);
        } else if (blogasLenght == true && sameLenght == false){
            JOptionPane.showConfirmDialog((Component)null, "Iveskite ilgi is naujo: ilgid negali buti ne skaicius!", "alert", JOptionPane.DEFAULT_OPTION);
        } else if (blogasTimes == true && sameTimes == false){
            JOptionPane.showConfirmDialog((Component)null, "Iveskite ziurejimu skaiciu is naujo: ziurejimu skaicius negali buti ne skaicius!", "alert", JOptionPane.DEFAULT_OPTION);
        }else {
            //darau pakitimus sarasuose
            if (operations.changeEntry(sameName, sameLenght, sameTimes) == 0){
                JOptionPane.showConfirmDialog((Component)null, "Tokio ID nera zinomu, ziuretu arba ziurimu sarase!", "alert", JOptionPane.DEFAULT_OPTION);
            }
        }
}//GEN-LAST:event_changeButtonActionPerformed

    private void finishedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishedButtonActionPerformed
        //tikrinu id
        boolean blogasID;
        try {
            Integer.parseInt(IDTextField.getText());
            blogasID = false;
        } catch (NumberFormatException e) {
            System.out.println(e.toString());
            blogasID = true;
        }
        if (IDTextField.getText().matches("")){
            blogasID = true;
        }
        if (blogasID == true){
            JOptionPane.showConfirmDialog((Component)null, "Iveskite ID is naujo: ID negali buti tuscias arba ne skaicius!", "alert", JOptionPane.DEFAULT_OPTION);
        } else {
            //darau pakitimus sarasuose
            if (operations.markAsSeen() == 0){
                JOptionPane.showConfirmDialog((Component)null, "Tokio ID nera ziurimu sarase!", "alert", JOptionPane.DEFAULT_OPTION);
            }
        }
}//GEN-LAST:event_finishedButtonActionPerformed

    private void watchingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchingButtonActionPerformed
        //tikrinu id
        boolean blogasID;
        try {
            Integer.parseInt(IDTextField.getText());
            blogasID = false;
        } catch (NumberFormatException e) {
            System.out.println(e.toString());
            blogasID = true;
        }
        if (IDTextField.getText().matches("")){
            blogasID = true;
        }
        if (blogasID == true){
            JOptionPane.showConfirmDialog((Component)null, "Iveskite ID is naujo: ID negali buti tuscias arba ne skaicius!", "alert", JOptionPane.DEFAULT_OPTION);
        } else {
            //darau pakitimus sarasuose
            if (operations.markAsWatching() == 0){
                JOptionPane.showConfirmDialog((Component)null, "Tokio ID nera zinomu arba ziuretu sarase!", "alert", JOptionPane.DEFAULT_OPTION);
            }
        }
}//GEN-LAST:event_watchingButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        boolean blogasVardas = false;
        boolean blogasIlgis;
        boolean blogasKartuZiureta;
        //tikrinu varda
        if (nameTextField.getText().matches("")){
            blogasVardas = true;
        }
        //tikrinu ilgi
        try {
            Integer.parseInt(lenghtTextField.getText());
            blogasIlgis = false;
        } catch (NumberFormatException e) {
            System.out.println(e.toString());
            blogasIlgis = true;
        }
        if (lenghtTextField.getText().matches("")){
            blogasIlgis = true;
        }
        //tikrinu kartu ziureta
        try {
            Integer.parseInt(timesTextField.getText());
            blogasKartuZiureta = false;
        } catch (NumberFormatException e) {
            System.out.println(e.toString());
            blogasKartuZiureta = true;
        }
        if (timesTextField.getText().matches("")){
            blogasKartuZiureta = true;
        }
        if (blogasVardas == true){
            JOptionPane.showConfirmDialog((Component)null, "Iveskite varda is naujo: vardas negali buti tuscias!", "alert", JOptionPane.DEFAULT_OPTION);
        } else if (blogasIlgis == true){
            JOptionPane.showConfirmDialog((Component)null, "Iveskite ilgi is naujo: ilgis negali buti tuscias arba ne skaicius!", "alert", JOptionPane.DEFAULT_OPTION);
        } else if (blogasKartuZiureta == true){
            JOptionPane.showConfirmDialog((Component)null, "Iveskite kartu ziureta is naujo: kartu ziureta negali buti tuscias arba ne skaicius!", "alert", JOptionPane.DEFAULT_OPTION);
        } else {
            operations.makeNewEntry();
        }
}//GEN-LAST:event_addButtonActionPerformed

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
        operations.suggestRandom();
}//GEN-LAST:event_randomButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        //tikrinu id
        boolean blogasID;
        try {
            Integer.parseInt(IDTextField.getText());
            blogasID = false;
        } catch (NumberFormatException e) {
            System.out.println(e.toString());
            blogasID = true;
        }
        if (IDTextField.getText().matches("")){
            blogasID = true;
        }
        if (blogasID == true){
            JOptionPane.showConfirmDialog((Component)null, "Iveskite ID is naujo: ID negali buti tuscias arba ne skaicius!", "alert", JOptionPane.DEFAULT_OPTION);
        } else {
            //darau pakitimus sarasuose
            if (operations.deleteEntry() == 0){
                JOptionPane.showConfirmDialog((Component)null, "Tokio ID nera zinomu, ziurimu arba ziuretu sarase!", "alert", JOptionPane.DEFAULT_OPTION);
            }
        }
}//GEN-LAST:event_deleteButtonActionPerformed

    private void UtilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UtilButtonActionPerformed
        //susiejam langa su aptarnaujancia klase
        //ikelia duomenis is failu ir pasikrauna
        operations = new operations(this);
        UtilTextField.setEnabled(false);
        UtilButton.setEnabled(false);
        MenuIsFailoButton.setEnabled(false);
        ExitButton.setEnabled(true);
        SaveButton.setEnabled(true);
        addButton.setEnabled(true);
        changeButton.setEnabled(true);
        deleteButton.setEnabled(true);
        finishedButton.setEnabled(true);
        randomButton.setEnabled(true);
        watchingButton.setEnabled(true);
        SearchButton.setEnabled(true);
        listComboBox.setEnabled(true);
        typeComboBox.setEnabled(true);
        weightComboBox.setEnabled(true);
        lenghtTextField.setEnabled(true);
        nameTextField.setEnabled(true);
        timesTextField.setEnabled(true);
        IDTextField.setEnabled(true);
}//GEN-LAST:event_UtilButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        operations.saveAllData();
        operations.closeWriters();
        ShowListsButton.setEnabled(true);
}//GEN-LAST:event_SaveButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        operations.saveAllData();
        operations.closeWriters();
        System.exit(0);
}//GEN-LAST:event_ExitButtonActionPerformed

    private void SeenPropertyIvedimas(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SeenPropertyIvedimas
        //kai paspaudziam ir ka nors pasirenkam - uzpildo laukus su to elemento reiksmemis
        operations.fillFields(SeenTable, imageLabel, true, operations.getSeenList(), "Seen");
}//GEN-LAST:event_SeenPropertyIvedimas

    private void WatchingPropertyIvedimas(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WatchingPropertyIvedimas
        //kai paspaudziam ir ka nors pasirenkam - uzpildo laukus su to elemento reiksmemis
        operations.fillFields(WatchingTable, imageLabel, true, operations.getWatchingList(), "Watching");
}//GEN-LAST:event_WatchingPropertyIvedimas

    private void KnownPropertyIvedimas(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KnownPropertyIvedimas
        //kai paspaudziam ir ka nors pasirenkam - uzpildo laukus su to elemento reiksmemis
        operations.fillFields(KnownTable, imageLabel, true, operations.getKnownList(), "Known");
}//GEN-LAST:event_KnownPropertyIvedimas

    private void MenuIsFailoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIsFailoButtonActionPerformed
        fc = new JFileChooser("d:/");
        int returnVal = fc.showOpenDialog(AnimeWindow.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            //gaunam reiksme
            UtilTextField.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_MenuIsFailoButtonActionPerformed

    private void ShowListsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowListsButtonActionPerformed
        Lists lists = new Lists(operations);
        lists.setVisible(true);
    }//GEN-LAST:event_ShowListsButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        Search search = new Search(this);
        search.setVisible(true);
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void ReccomendedPropertyIvedimas(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReccomendedPropertyIvedimas
        //kai paspaudziam ir ka nors pasirenkam - uzpildo laukus su to elemento reiksmemis
        operations.fillFields(ReccomendedTable, imageLabel, false, operations.getReccomendedList(), "Reccomended");
    }//GEN-LAST:event_ReccomendedPropertyIvedimas
    
    public operations getOperations(){
        return operations;
    }
    
    public javax.swing.JTable getSeenTable(){
        return SeenTable;
    }
    
    public javax.swing.JTable getKnownTable(){
        return KnownTable;
    }
    
    public javax.swing.JTable getWatchingTable(){
        return WatchingTable;
    }
    
    public javax.swing.JTable getReccomendedTable(){
        return ReccomendedTable;
    }
    
    public javax.swing.JTextField getIDTextField(){
        return IDTextField;
    }
    
    public javax.swing.JTextField getnameTextField(){
        return nameTextField;
    }
    
    public javax.swing.JTextField getlenghtTextField(){
        return lenghtTextField;
    }
    
    public javax.swing.JTextField gettimesTextField(){
        return timesTextField;
    }
    
    public javax.swing.JTextField getUtilTextField(){
        return UtilTextField;
    }
    
    public javax.swing.JComboBox gettypeComboBox(){
        return typeComboBox;
    }
    
    public javax.swing.JComboBox getweightComboBox(){
        return weightComboBox;
    }
    
    public javax.swing.JComboBox getlistComboBox(){
        return listComboBox;
    }
    
    public javax.swing.JLabel getrandomLabel(){
        return randomLabel;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DataPanel;
    private javax.swing.JButton ExitButton;
    private javax.swing.JLabel IDLabel;
    private javax.swing.JTextField IDTextField;
    private javax.swing.JScrollPane KnownScrollPane;
    private javax.swing.JTable KnownTable;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JTabbedPane MainTabbedPane;
    private javax.swing.JButton MenuIsFailoButton;
    private javax.swing.JScrollPane ReccomendedScrollPane;
    private javax.swing.JTable ReccomendedTable;
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JScrollPane SeenScrollPane;
    private javax.swing.JTable SeenTable;
    private javax.swing.JButton ShowListsButton;
    private javax.swing.JButton UtilButton;
    private javax.swing.JPanel UtilPanel;
    private javax.swing.JTextField UtilTextField;
    private javax.swing.JScrollPane WatchingScrollPane;
    private javax.swing.JTable WatchingTable;
    private javax.swing.JPanel WorkPanel;
    private javax.swing.JButton addButton;
    private javax.swing.JButton changeButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton finishedButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JLabel lenghtLabel;
    private javax.swing.JTextField lenghtTextField;
    private javax.swing.JComboBox listComboBox;
    private javax.swing.JLabel listLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton randomButton;
    private javax.swing.JLabel randomLabel;
    private javax.swing.JLabel timesLabel;
    private javax.swing.JTextField timesTextField;
    private javax.swing.JComboBox typeComboBox;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton watchingButton;
    private javax.swing.JComboBox weightComboBox;
    private javax.swing.JLabel weightLabel;
    // End of variables declaration//GEN-END:variables
    
}
