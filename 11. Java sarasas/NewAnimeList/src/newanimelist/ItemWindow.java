/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newanimelist;

import java.awt.Component;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Viktoras
 */
public class ItemWindow extends javax.swing.JFrame {

    /**
     * Creates new form ItemWindow
     */
    public ItemWindow() {
        initComponents();
        //
        fileChooser = new JFileChooser("C:/");
        
        
    }
    
    //1, Skymaster 20SH2500, TV, 150, 66, UK, Swindon, Steeple View;
    
    private final JFileChooser fileChooser;
    private File file;
    private String[] header = new String [] {"Id", "Title", "Type", "Price", "Stock", "Address"};

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoadFileButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        IdInput = new javax.swing.JTextField();
        TitleInput = new javax.swing.JTextField();
        TypeInput = new javax.swing.JTextField();
        PriceInput = new javax.swing.JTextField();
        StockInput = new javax.swing.JTextField();
        CountryInput = new javax.swing.JTextField();
        CityInput = new javax.swing.JTextField();
        StreetInput = new javax.swing.JTextField();
        SaveFileButton = new javax.swing.JButton();
        CreateButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        AddCommentButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        Filter = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Comment = new javax.swing.JTextArea();
        FilterChoise = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LoadFileButton.setText("Load File");
        LoadFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFileButtonActionPerformed(evt);
            }
        });

        Table.setAutoCreateRowSorter(true);
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Type", "Price", "Stock", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jLabel1.setText("ID");

        jLabel2.setText("Title");

        jLabel3.setText("Type");

        jLabel4.setText("Price");

        jLabel5.setText("Stock");

        jLabel6.setText("Country");

        jLabel7.setText("City");

        jLabel8.setText("Street");

        SaveFileButton.setText("Save File");
        SaveFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveFileButtonActionPerformed(evt);
            }
        });

        CreateButton.setText("Create");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        AddCommentButton.setText("Add Comment");
        AddCommentButton.setAlignmentY(0.0F);
        AddCommentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCommentButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Type to filter by title");

        Filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FilterKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                FilterKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FilterKeyTyped(evt);
            }
        });

        Comment.setColumns(20);
        Comment.setLineWrap(true);
        Comment.setRows(5);
        jScrollPane2.setViewportView(Comment);

        FilterChoise.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Title", "Type", "Price", "Stock", "Address" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IdInput)
                            .addComponent(TitleInput)
                            .addComponent(TypeInput)
                            .addComponent(PriceInput)
                            .addComponent(StockInput)
                            .addComponent(CountryInput)
                            .addComponent(CityInput)
                            .addComponent(StreetInput)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AddCommentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CreateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SaveFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LoadFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Filter))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(FilterChoise, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(IdInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(TitleInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(TypeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(PriceInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StockInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CountryInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CityInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StreetInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CreateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UpdateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AddCommentButton))
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FilterChoise, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LoadFileButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private List<Item> items;

    private void LoadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFileButtonActionPerformed
        try {
            int returnValue = fileChooser.showOpenDialog(ItemWindow.this);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile();
                //UtilTextField.setText(file.getAbsolutePath());
                System.out.println(file.getPath() + " " +  file.getName());
            }
            
            /**/
            
            BufferedReader fileReader = null;
 
	    try {
                
	        //Create a new list of student to be filled by CSV file data
	        items = new ArrayList();
                String line;

	        //Create the file reader
	        fileReader = new BufferedReader(new FileReader(file.getPath()));             

	        ////Read the CSV file header to skip it
                //fileReader.readLine();
                
                IdIndex = new ArrayList();

	        //Read the file line by line starting from the second line
                while ((line = fileReader.readLine()/*.trim()*/) != null) {
	            //Get all tokens available in line
                    
                    /*if (items.isEmpty()) {
                        line = line.substring(1);
                    }*/
                    
	            String[] tokens = line.split(",");
                    System.out.println(tokens[0] + " " + tokens[1] + " " + tokens[2]);
	            if (tokens.length > 0) {
	                //Create a new student object and fill his  data
	                Item item = new Item(
                            Integer.parseInt(tokens[0]/*.substring(1)*/), 
                            tokens[1], 
                            tokens[2], 
                            Integer.parseInt(tokens[3]), 
                            Integer.parseInt(tokens[4]),
                            new Location (tokens[5], tokens[6], tokens[7]),
                            tokens[8]);
	                items.add(item);
                        IdIndex.add(item.getId());
                        
	            }
	        }
	             
	        //Print the new student list
	        for (Item item : items) {
	            System.out.println(item.getId().toString() + " " + item.getTitle()
                     + " " + item.getDescription() + " " + item.getPrice().toString()
                     + " " + item.getStock().toString() + " size " + items.size());
	        }
                
                DefaultTableModel model = new DefaultTableModel(header, items.size()){
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false, false
                    };
                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                };
                Table.setModel(model);
                Table.getColumnModel().getColumn(0).setPreferredWidth(30);
                Table.getColumnModel().getColumn(1).setPreferredWidth(100);
                Table.getColumnModel().getColumn(2).setPreferredWidth(50);
                Table.getColumnModel().getColumn(3).setPreferredWidth(30);
                Table.getColumnModel().getColumn(4).setPreferredWidth(30);
                Table.getColumnModel().getColumn(5).setPreferredWidth(150);
                
                showEntities(items);    

	    }
	    catch (Exception e) {
	        System.out.println("Error in CsvFileReader !!!");
	        e.printStackTrace();
	    } finally {
	        try {
	            fileReader.close();
	        } catch (IOException e) {
	            System.out.println("Error while closing fileReader !!!");
	            e.printStackTrace();
	        }
	    }
                
        } catch (Exception e){
            System.out.println(e.toString()+" on load file");
        }
    }//GEN-LAST:event_LoadFileButtonActionPerformed

    public void showEntities(List targetList){
        try {
            //System.out.println(targetList.size());
            DefaultTableModel model = (DefaultTableModel) Table.getModel();
            int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            
            for (int i = 0; i < targetList.size(); i++){
                Item item = (Item)targetList.get(i);
                
                model.addRow(new Object[]{item.getId(), item.getTitle(), item.getDescription(),
                item.getPrice(), item.getStock(), item.getLocation().getCountry() + ", " + item.getLocation().getCity()
                     + ", " + item.getLocation().getStreet()});
                /*Table.setValueAt(item.getId(), i, 0);
                Table.setValueAt(item.getTitle(), i, 1);
                Table.setValueAt(item.getDescription(), i, 2);
                Table.setValueAt(item.getPrice(), i, 3);
                Table.setValueAt(item.getStock(), i, 4);
                Table.setValueAt(
                    item.getLocation().getCountry() + ", " + item.getLocation().getCity()
                    + ", " + item.getLocation().getStreet(), i, 5);*/
            }
        } catch (Exception e){
            System.out.println(e.toString()+" showEntities");
        }
    }
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        fillFields();
    }//GEN-LAST:event_TableKeyPressed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        fillFields();
    }//GEN-LAST:event_TableKeyReleased

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
       fillFields();
    }//GEN-LAST:event_TableMouseClicked

    public void fillFields(/*ArrayList targetList*/){
        try{
            int row = Table.getSelectedRow();
            if (row != -1 && row < items.size()){
                IdInput.setText(Table.getValueAt(row, 0).toString());
                TitleInput.setText(Table.getValueAt(row, 1).toString());
                TypeInput.setText(Table.getValueAt(row, 2).toString());
                PriceInput.setText(Table.getValueAt(row, 3).toString());
                StockInput.setText(Table.getValueAt(row, 4).toString());
                String[] tokens = Table.getValueAt(row, 5).toString().split(",");
                CountryInput.setText(tokens[0]);
                CityInput.setText(tokens[1].substring(1));
                StreetInput.setText(tokens[2].substring(1));
                
            }
            
            int searchedID = new Integer(IdInput.getText());
            Item item;
            
            for (int i = 0; i < items.size(); i++){
                //System.out.println("i "+i);
                item = items.get(i);
                
                if (item.getId().equals(searchedID)){
                    Comment.setText(item.getComment());                   
                    break;
                }
            }
        } catch (Exception e){
            System.out.println(e.toString()+" fillFields");
        }
    }
    
    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        try {
            //generateNextID();
            
            Item item = new Item(
                generateNextID(), 
                TitleInput.getText(), 
                TypeInput.getText(), 
                Integer.parseInt(PriceInput.getText()), 
                Integer.parseInt(StockInput.getText()),
                new Location (CountryInput.getText(), CityInput.getText(), StreetInput.getText()),
                Comment.getText());
	    items.add(item);
            IdIndex.add(item.getId());
            
            DefaultTableModel model = (DefaultTableModel) Table.getModel();
            model.addRow(new Object[]{item.getId(), item.getTitle(), item.getDescription(),
                item.getPrice(), item.getStock(), item.getLocation().getCountry() + ", " + item.getLocation().getCity()
                 + ", " + item.getLocation().getStreet()});

            //sortList(knownList);
            //sortIDList();
            
        } catch (Exception e){
            System.out.println(e.toString()+" makeNewEntry");
            JOptionPane.showConfirmDialog((Component)null, "Action failed!", "alert", JOptionPane.DEFAULT_OPTION);
        }
    }//GEN-LAST:event_CreateButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        boolean sameIDFound;
        try {
            Integer.parseInt(IdInput.getText());
            sameIDFound = false;
        } catch (NumberFormatException e) {
            System.out.println(e.toString()+" sameIDFound = true");
            sameIDFound = true;
        }
        
        if (sameIDFound == true){
            JOptionPane.showConfirmDialog((Component)null, "Same ID Found!", "alert", JOptionPane.DEFAULT_OPTION);
        } else {
            if (changeEntry(/*sameNameFound, sameLenghtFound, sameTimesFound*/) == false){
                JOptionPane.showConfirmDialog((Component)null, "Failed to update!", "alert", JOptionPane.DEFAULT_OPTION);
            }
        }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed

        try {
            
            int searchedID = new Integer(IdInput.getText());
            Item item;
            
            for (int i = 0; i < items.size(); i++){
                //System.out.println("i "+i);
                item = items.get(i);
                
                if (item.getId().equals(searchedID)){
                    items.remove(i);
                    IdIndex.remove((Object)searchedID);
                    ((DefaultTableModel)Table.getModel()).removeRow(Table.getSelectedRow());
                    
                    break;
                }
            }
            
        } catch (Exception e){
            System.out.println(e.toString()+" deleteEntry");
            JOptionPane.showConfirmDialog((Component)null, "Action failed!", "alert", JOptionPane.DEFAULT_OPTION);
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void AddCommentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCommentButtonActionPerformed
        int searchedID = new Integer(IdInput.getText());
        Item item;
        for (int i = 0; i < items.size(); i++){
            //System.out.println("i "+i);
            item = items.get(i);
                
            if (item.getId().equals(searchedID)){
                item.setComment(Comment.getText());                   
                break;
            }
        }
    }//GEN-LAST:event_AddCommentButtonActionPerformed

    private void SaveFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveFileButtonActionPerformed
        FileWriter fileWriter = null;
	        try {
	            fileWriter = new FileWriter(file.getPath());
	 
	            //Write the CSV file header
	            //fileWriter.append(FILE_HEADER.toString());
	             
	            //Add a new line separator after the header
	            //fileWriter.append(NEW_LINE_SEPARATOR);
	             
	            //Write a new student object list to the CSV file
	            for (Item item : items) {
	                fileWriter.append(String.valueOf(item.getId()));
	                fileWriter.append(",");
	                fileWriter.append(item.getTitle());
	                fileWriter.append(",");
                        fileWriter.append(item.getDescription());
	                fileWriter.append(",");
                        fileWriter.append(String.valueOf(item.getPrice()));
	                fileWriter.append(",");
                        fileWriter.append(String.valueOf(item.getStock()));
	                fileWriter.append(",");
                        fileWriter.append(item.getLocation().getCountry());
	                fileWriter.append(",");
                        fileWriter.append(item.getLocation().getCity());
	                fileWriter.append(",");
                        fileWriter.append(item.getLocation().getStreet());
	                fileWriter.append(",");
                        fileWriter.append(item.getComment());
	                fileWriter.append(System.lineSeparator());
	            }

	            System.out.println("CSV file was created successfully !!!");

	        } catch (Exception e) {
	            System.out.println("Error in CsvFileWriter !!!");
	            e.printStackTrace();
	        } finally {
	            try {
	                fileWriter.flush();
	                fileWriter.close();
	            } catch (IOException e) {
	                System.out.println("Error while flushing/closing fileWriter !!!");
	                e.printStackTrace();
	            }
	        }
    }//GEN-LAST:event_SaveFileButtonActionPerformed

    private void FilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FilterKeyTyped
        sort();
    }//GEN-LAST:event_FilterKeyTyped

    private void FilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FilterKeyReleased
        sort();
    }//GEN-LAST:event_FilterKeyReleased

    private void FilterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FilterKeyPressed
        sort();
    }//GEN-LAST:event_FilterKeyPressed

    public void sort(){
        List<Item> sortedList = new ArrayList();
        Item item;
        for (int i = 0; i < items.size(); i++){
            item = items.get(i);
            if (item.getId().toString().contains(Filter.getText()) && FilterChoise.getSelectedIndex() == 0) {
                sortedList.add(item);
            }
            if (item.getTitle().contains(Filter.getText()) && FilterChoise.getSelectedIndex() == 1) {
                sortedList.add(item);
            }
            if (item.getDescription().contains(Filter.getText()) && FilterChoise.getSelectedIndex() == 2) {
                sortedList.add(item);
            }
            if (item.getPrice().toString().contains(Filter.getText()) && FilterChoise.getSelectedIndex() == 3) {
                sortedList.add(item);
            }
            if (item.getStock().toString().contains(Filter.getText()) && FilterChoise.getSelectedIndex() == 4) {
                sortedList.add(item);
            }
            if ((item.getLocation().getCountry().contains(Filter.getText())
                || item.getLocation().getCity().contains(Filter.getText())
                || item.getLocation().getStreet().contains(Filter.getText()))
                && FilterChoise.getSelectedIndex() == 5) {
                sortedList.add(item);
            }
        }

        showEntities(sortedList);
    }
            
    public boolean changeEntry(/*boolean sameName, boolean sameLenght, boolean sameTimes*/){
        boolean entryIsChanged = false;
        try {
            int searchedID = new Integer(IdInput.getText());
            Item item;
            for (int i = 0; i < items.size(); i++){
                //System.out.println("i "+i);
                item = items.get(i);
                
                if (item.getId().equals(searchedID)){
                    entryIsChanged = true;
                    
                    item.setTitle(TitleInput.getText());
                    item.setDescription(TypeInput.getText());
                    item.setPrice(Integer.parseInt(PriceInput.getText()));
                    item.setStock(Integer.parseInt(StockInput.getText()));
                    item.setLocation(new Location (CountryInput.getText(), CityInput.getText(), StreetInput.getText()));

                    items.set(i, item);
                    
                    int row = Table.getSelectedRow();
                    if (row != -1 && row < items.size()){
                        //Table.setValueAt(item.getId(), row, 0);
                        Table.setValueAt(item.getTitle(), row, 1);
                        Table.setValueAt(item.getDescription(), row, 2);
                        Table.setValueAt(item.getPrice(), row, 3);
                        Table.setValueAt(item.getStock(), row, 4);
                        Table.setValueAt(item.getLocation().getCountry() + ", " + item.getLocation().getCity()
                             + ", " + item.getLocation().getStreet(), row, 5);
                    }

                    break;
                }
            }

        } catch (Exception e){
            System.out.println(e.toString());
            JOptionPane.showConfirmDialog((Component)null, "Update Action failed!", "alert", JOptionPane.DEFAULT_OPTION);
        }
        return entryIsChanged;
    }
    
    //
    
    private ArrayList IdIndex;
    //private int nextID = 1;
    
    private int generateNextID(){
        
        //int nextID = 1;
        int i = 1;
        try {
            boolean idIsGenerated = false;
            
            //int value;
            //int j = 0;
            //int listSize = IdIndex.size();
            Collections.sort(IdIndex);
            //IdIndex.sort(new Comparator().com);
            
            while (idIsGenerated == false){
                //idIsGenerated = false;
                if (!IdIndex.contains((Object)i)) {
                    idIsGenerated = true;
                    break;
                    //nextID = i;
                }
                i++;
            }
            
        } catch (Exception e){
            System.out.println(e.toString()+" generateNextID");
        }
        
        return i;
    }
    
    //
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemWindow().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddCommentButton;
    private javax.swing.JTextField CityInput;
    private javax.swing.JTextArea Comment;
    private javax.swing.JTextField CountryInput;
    private javax.swing.JButton CreateButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTextField Filter;
    private javax.swing.JComboBox<String> FilterChoise;
    private javax.swing.JTextField IdInput;
    private javax.swing.JButton LoadFileButton;
    private javax.swing.JTextField PriceInput;
    private javax.swing.JButton SaveFileButton;
    private javax.swing.JTextField StockInput;
    private javax.swing.JTextField StreetInput;
    private javax.swing.JTable Table;
    private javax.swing.JTextField TitleInput;
    private javax.swing.JTextField TypeInput;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
